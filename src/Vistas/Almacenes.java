
package Vistas;

import Entidades.Almacen;
import Entidades.Barbero;
import Entidades.Local;
import Entidades.Producto;
import Entidades.Stock;
import Metodos.AlmacenData;
import Metodos.Conexion;
import Metodos.LocalData;
import Metodos.ProductoData;
import Metodos.StockData;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;


public class Almacenes extends javax.swing.JFrame {

    private Conexion con;
    private AlmacenData almacenData;
     private Almacen almacen;
 
    private Local local;
    private LocalData localData;    
    private Producto producto;
    private ProductoData productoData;
   private StockData stockData;
   
   
    public Almacenes() {
        initComponents();
        con = new Conexion(); // Inicializas la conexión
        almacenData = new AlmacenData();
        
         con = new Conexion(); // Inicializas la conexión        
        almacen = new Almacen();
        almacenData = new AlmacenData();
         local = new Local();
         localData = new LocalData();
          producto = new Producto();
          productoData = new ProductoData();
          stockData = new StockData();
         
          llenarComboBoxLocal();
          llenarComboBoxProducto();
          llenarComboBoxAlamcen();
          
          
//          btnAbastecer.addActionListener(new ActionListener() {
//    @Override
//    public void actionPerformed(ActionEvent e) {
//        // Obtener los valores seleccionados en los JComboBox
//        Local localSeleccionado = (Local) cbxLocal.getSelectedItem();
//        Producto productoSeleccionado = (Producto) cbxProducto.getSelectedItem();
//        
//        // Obtener la cantidad desde el campo de texto
//        String cantidadTexto = txtCantidad.getText();
//        
//        // Validar si la cantidad es un número
//        int cantidad;
//        try {
//            cantidad = Integer.parseInt(cantidadTexto);
//        } catch (NumberFormatException ex) {
//            JOptionPane.showMessageDialog(null, "Por favor, ingrese una cantidad válida.");
//            return;
//        }
//
//        // Crear una instancia de Stock
//        Stock nuevoStock = new Stock();
//        nuevoStock.setLocal(localSeleccionado);
//        nuevoStock.setProducto(productoSeleccionado);
//        nuevoStock.setCantidad(cantidad);
//
//        // Llamar al método agregarStock sin verificar retorno
//        stockData.agregarStock(nuevoStock);
//
//        // Mostrar mensaje de éxito (o manejar error dentro del método)
//        JOptionPane.showMessageDialog(null, "Stock agregado exitosamente.");
//    }
//});

btnAbastecer.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        // Obtener los valores seleccionados en los JComboBox
        Local localSeleccionado = (Local) cbxLocal.getSelectedItem();
        Producto productoSeleccionado = (Producto) cbxProducto.getSelectedItem();
        Almacen almacenSeleccionado = (Almacen) cbxAlmacen.getSelectedItem();
        
        // Obtener la cantidad desde el campo de texto
        String cantidadTexto = txtCantidad.getText();
        
        // Validar si la cantidad es un número
        int cantidad;
        try {
            cantidad = Integer.parseInt(cantidadTexto);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese una cantidad válida.");
            return;
        }

        // Llamar al método abastecerSucursalDesdeAlmacen
        boolean exito = almacenData.abastecerSucursalDesdeAlmacen(productoSeleccionado.getIdProducto(), 
                                                               almacenSeleccionado.getIdAlmacen(), 
                                                               localSeleccionado.getIdLocal(), 
                                                               cantidad);

        // Mostrar mensaje de éxito o error
        if (exito) {
            JOptionPane.showMessageDialog(null, "Stock abastecido exitosamente.");
        } else {
            JOptionPane.showMessageDialog(null, "Error al abastecer el stock.");
        }
    }
});

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fondo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        cbxLocal = new javax.swing.JComboBox<>();
        cbxProducto = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnAbastecer = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cbxAlmacen = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1020, 468));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondos/2p.jpg"))); // NOI18N
        jPanel1.add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 470));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 153, 255));
        jLabel1.setText("ALMACEN");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, 160, 50));

        jLabel2.setText("Nombre de Almacen");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 70, -1, -1));

        jLabel3.setText("Dirección");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 130, -1, -1));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/32/boton.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 400, 150, 50));

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/22/peluqueria (1).png"))); // NOI18N
        btnAgregar.setText("AGREGAR");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 90, 160, 90));
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 90, 200, 30));
        jPanel1.add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 150, 200, 30));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 213, 380, 20));

        jLabel4.setText("Abastecer Sucursal");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 300, 130, -1));

        jPanel1.add(cbxLocal, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 330, 180, 30));

        jPanel1.add(cbxProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 260, 200, 30));

        jLabel5.setText("Producto");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 240, -1, -1));
        jPanel1.add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 330, 160, 30));

        jLabel6.setText("Cantidad");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 310, -1, -1));

        btnAbastecer.setText("ABASTECER");
        btnAbastecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbastecerActionPerformed(evt);
            }
        });
        jPanel1.add(btnAbastecer, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 400, 200, 50));

        jLabel7.setText("Almacen");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 240, -1, -1));

        jPanel1.add(cbxAlmacen, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 260, 180, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
         // Recopilar los datos del barbero desde el campo de texto y eliminar espacios en blanco
    String nombre = txtNombre.getText().trim();
     String direccion = txtDireccion.getText().trim();

    // Validar que el campo no esté vacío
    if (nombre.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        // Crear un objeto Barbero y asignar el nombre
        Almacen almacen = new Almacen();
        almacen.setNombre(nombre);
         almacen.setDireccion(direccion);

        // Llamar al método para agregar el barbero en la base de datos
        almacenData.agregarAlmacen(almacen);

        // Limpiar el campo de texto después de agregar
        

        JOptionPane.showMessageDialog(this, "Almacen agregado exitosamente.");
        txtNombre.setText("");
        txtDireccion.setText("");
    
    }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAbastecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbastecerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAbastecerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Almacenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Almacenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Almacenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Almacenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Almacenes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbastecer;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JComboBox<Almacen> cbxAlmacen;
    private javax.swing.JComboBox<Local> cbxLocal;
    private javax.swing.JComboBox<Producto> cbxProducto;
    private javax.swing.JLabel fondo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables


private void llenarComboBoxLocal() {
    List<Local> loc = localData.listarLocal();
    DefaultComboBoxModel<Local> model = new DefaultComboBoxModel<>();

    // Agregar un elemento vacío al inicio
    model.addElement(null);

    for (Local local : loc) {
        model.addElement(local);
    }

    cbxLocal.setModel(model);

    // Configurar el renderizado del JComboBox para mostrar apellido, nombre
    cbxLocal.setRenderer(new javax.swing.DefaultListCellRenderer() {
        @Override
        public java.awt.Component getListCellRendererComponent(
                javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value instanceof Local) {
                Local local = (Local) value;
                value = local.getNombreLocal();
                
            } else if (value == null) {
                value = ""; // Mostrar una cadena vacía para el elemento vacío
            }
            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    });
}

private void llenarComboBoxProducto() {
    List<Producto> prod = productoData.listarProductos();
    DefaultComboBoxModel<Producto> model = new DefaultComboBoxModel<>();

    // Agregar un elemento vacío al inicio
    model.addElement(null);

    for (Producto product : prod) {
        model.addElement(product);
    }

    cbxProducto.setModel(model);

    // Configurar el renderizado del JComboBox para mostrar apellido, nombre
    cbxProducto.setRenderer(new javax.swing.DefaultListCellRenderer() {
        @Override
        public java.awt.Component getListCellRendererComponent(
                javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value instanceof Producto) {
                Producto producto = (Producto) value;
                value = producto.getDescripcion();
                
            } else if (value == null) {
                value = ""; // Mostrar una cadena vacía para el elemento vacío
            }
            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    });
}

private void llenarComboBoxAlamcen() {
    List<Almacen> alm = almacenData.listarAmacen();
    DefaultComboBoxModel<Almacen> model = new DefaultComboBoxModel<>();

    // Agregar un elemento vacío al inicio
    model.addElement(null);

    for (Almacen almacen : alm) {
        model.addElement(almacen);
    }

    cbxAlmacen.setModel(model);

    // Configurar el renderizado del JComboBox para mostrar apellido, nombre
    cbxAlmacen.setRenderer(new javax.swing.DefaultListCellRenderer() {
        @Override
        public java.awt.Component getListCellRendererComponent(
                javax.swing.JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            if (value instanceof Almacen) {
                Almacen almacen = (Almacen) value;
                value = almacen.getIdAlmacen()+almacen.getNombre();
                
            } else if (value == null) {
                value = ""; // Mostrar una cadena vacía para el elemento vacío
            }
            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    });
}

}
